/*

Given an array of non negative integers A, and a range (B, C), 
find the number of continuous subsequences in the array which have sum S in the range [B, C] or B <= S <= C

Continuous subsequence is defined as all the numbers A[i], A[i + 1], .... A[j]
where 0 <= i <= j < size(A)

Example :

A : [10, 5, 1, 0, 2]
(B, C) : (6, 8)
ans = 3 
as [5, 1], [5, 1, 0], [5, 1, 0, 2] are the only 3 continuous subsequence with their sum in the range [6, 8]


*/


public class Solution {
	public int numRange(ArrayList<Integer> a, int b, int c) {
	    int count = 0;
		if(a.isEmpty()) {
		    return count;
		}
		for(int i=0; i< a.size(); i++){
			int sum =0;
			for(int j = i ; j < a.size(); j++) {
				sum = sum + a.get(j);
				if(sum >= b && sum <=c){
					count++;
				}
				if(sum > c) {
					break;
				}
			}
		}
		System.out.println(count);
		return count;
		
	}
	public  void main(String[] args) {
			ArrayList<Integer> arr = new ArrayList<Integer>();
			arr.add(10);
			arr.add(5);
			arr.add(1);
			arr.add(8);
			arr.add(2);
			
			numRange(arr,6,8);
	}
}
